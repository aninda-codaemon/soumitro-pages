// Generated by CoffeeScript 1.6.3
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function() {
      return this.replace(/^\s+|\s+$/g, '');
    };
  }

  String.prototype.capitalize = function() {
    var letters;
    letters = this.split("");
    if (letters.length === 0) {
      return '';
    }
    letters[0] = letters[0].toUpperCase();
    return letters.join("");
  };

  String.prototype.nameize = function() {
    var name;
    name = this;
    if (name === null) {
      return "";
    }
    if (name.match(/\s+/)) {
      return _.map(this.split(" "), function(part) {
        return part.nameize();
      }).join(" ");
    } else if (name.match(/^[A-Z][A-Z]+/)) {
      name = name.toLowerCase();
    } else {
      name = name.toLowerCase();
    }
    if (name.match(/^mac/)) {
      name = "Mac" + name.replace(/^mac/, '').capitalize();
    } else if (name.match(/^mc/)) {
      name = "Mc" + name.replace(/^mc/, '').capitalize();
    } else if (name.match(/\-/)) {
      name = _.map(name.split("-"), function(part) {
        return part.capitalize();
      }).join(' ');
    } else {
      name = name.capitalize();
    }
    return name;
  };

  String.prototype.phonify = function() {
    var phone;
    phone = this;
    if (phone === null){
      return "";
    }

    var justNumbers = phone.replace(/\D/g, ""),
    phonified = "(" + justNumbers.slice(0,3) + ") " + justNumbers.slice(3,6) +"-" + justNumbers.slice(6,10);
    return phonified;
  };

  String.prototype.formatEmail = function() {
    return this.replace(/[^@](X+)/g, '***');
  };

  String.prototype.formatPhone = function() {
    return this.replace(/([\d|X]{3})([\d|X]{3})([\d|X]{4})/, '$1-$2-$3');
  };

  String.prototype.nameize = function() {
    var name;
    name = this;
    if (name === null) {
      return "";
    }
    if (name.match(/\s+/)) {
      return _.map(this.split(" "), function(part) {
        return part.nameize();
      }).join(" ");
    } else if (name.match(/^[A-Z][A-Z]+/)) {
      name = name.toLowerCase();
    } else {
      name = name.toLowerCase();
    }
    if (name.match(/^mac/)) {
      name = "Mac" + name.replace(/^mac/, '').capitalize();
    } else if (name.match(/^mc/)) {
      name = "Mc" + name.replace(/^mc/, '').capitalize();
    } else if (name.match(/\-/)) {
      name = _.map(name.split("-"), function(part) {
        return part.capitalize();
      }).join(' ');
    } else {
      name = name.capitalize();
    }
    return name;
  };

  root._blank = function(string) {
    if (typeof string === 'undefined') {
      return true;
    } else if (string === null) {
      return true;
    } else if (string.match(/^\s+$/)) {
      return true;
    } else if (string === "") {
      return true;
    } else {
      return false;
    }
  };

  root._previewAddresses = function(addressObject){

    if (addressObject.Addresses === void 0){
      return [];
    }
    if ($.type(addressObject.Addresses.Address) !== 'array') {
      addresses = [addressObject.Addresses.Address];
    } else if ($.type(addressObject.Addresses.Address) === 'array') {
      addresses = addressObject.Addresses.Address;
    }
    return _.chain(addresses).map(function(address) {
      return _makeAddress(address);
    }, this).uniq().value();
  };

  root._not_blank = function(string) {
    return !_blank(string);
  };

  root._makeAddress = function(address) {
    var returnAddress;
    if (typeof address === 'undefined') {
      returnAddress = 'N/A';
    } else if (_not_blank(address.City) && _not_blank(address.State)) {
      returnAddress = "" + (address.City.nameize()) + ", " + address.State;
    } else if (_not_blank(address.City)) {
      returnAddress = address.City.nameize();
    } else if (_not_blank(address.State)) {
      returnAddress = address.State;
    }
    return returnAddress;
  };

  root._makeName = function(nameObject) {
    var name;
    if (nameObject.First === void 0 || nameObject.Last === void 0) {
      return null;
    } else {
      name = _.chain(["First", "Middle", "Last"]).map(function(key) {
        return nameObject[key];
      }).filter(function(namePart) {
        return _not_blank(namePart);
      }).value().join(" ");
      return name;
    }
  };

  root.setBootstrapSelect = function(name, string) {
    var item, text;
    item = $("select[name=" + name + "] option[value='" + string + "']")[0];
    text = $(item).text();
    $('.bootstrap-select .filter-option').text(text);
    return $("select[name=" + name + "]").val(string);
  };

}).call(this);
